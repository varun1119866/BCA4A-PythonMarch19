#1.1
length = float(input("Enter length of the rectangle: "))

breadth = float(input("Enter breadth of the rectangle: "))

area = length * breadth

perimeter = 2 * (length * breadth)
print("Area of rectangle = ", area)
print("Perimeter of rectangle = ", perimeter)


#1.2
a = int(input("Enter the marks of first subject: "))
b = int(input("Enter the marks of second subject: "))
c = int(input("Enter the marks of third subject: "))
total = a+b+c
avg = total/3
print("Total marks: ",total)
print("Average marks: ",avg)


#1.3
def compound_interest(principal, rate, time):
    Amount = principal * (pow((1 + rate / 100), time))
    CI = Amount - principal
    print("Compound interest is", CI)
principal = int(input("Enter the principal amount: "))
rate = int(input("Enter rate of interest: "))
time = int(input("Enter time in years: " ))
compound_interest(principal,rate,time)


#2.1
String = 'ASTRING'
s1 = slice(3)
s2 = slice(1, 5, 2)
s3 = slice(-1, -12, -2)
 
print("String slicing")
print(String[s1])
print(String[s2])
print(String[s3])


#2.2
text = 'i study in chitkara university'
print("\nConverted String:") 
print(text.upper()) 
  
print("\nConverted String:") 
print(text.lower()) 
   
print("\nConverted String:") 
print(text.title()) 
  
print("\nConverted String:") 
print(text.swapcase()) 
  
print("\nConverted String:") 
print(text.capitalize()) 
   
print("\nOriginal String:")
print(text)


#3.1
print("Enter a Number (Numerator): ")
numn = int(input())
print("Enter a Number (denominator): ")
numd = int(input())

if numn%numd==0:
  print("\n" +str(numn)+ " is divisible by " +str(numd))
else:
  print("\n" +str(numn)+ " is not divisible by " +str(numd))


#3.2
n=int(input("Enter Number ::"))
if n == 0:
      print("The Number Is Zero")
elif n > 0:
      print("This Is Positive Number")
else:
      print("This Is Negative Number")


#3.3
year=int(input("Enter year to be checked:"))
if(year%4==0 and year%100!=0 or year%400==0):
    print("The year is a leap year!")
else:
    print("The year isn't a leap year!")



#3.4
def calculate_salary(basic_salary):
    if basic_salary >= 20000:
        da = 0.3 * basic_salary
        hra = 0.2 * basic_salary
    else:
        da = 0.2 * basic_salary
        hra = 0.1 * basic_salary

    gross_salary = basic_salary + da + hra
    return gross_salary, da, hra

def main():
    basic_salary = float(input("Enter the basic salary of the employee: "))

    gross_salary, da, hra = calculate_salary(basic_salary)

    print("Basic Salary: ", basic_salary)
    print("Dearness Allowance (DA): ", da)
    print("House Rent Allowance (HRA): ", hra)
    print("Gross Salary: ", gross_salary)

if __name__ == "__main__":
    main()



#3.5
def calculate_commission(sales_amount):
    if sales_amount >= 15000:
        commission = 0.20 * sales_amount
    elif sales_amount >= 1000:
        commission = 0.15 * sales_amount
    else:
        commission = 0.10 * sales_amount
    return commission

def main():
    sales_amount = float(input("Enter the sales amount: "))

    commission = calculate_commission(sales_amount)

    print("Sales Amount: ", sales_amount)
    print("Commission: ", commission)

if __name__ == "__main__":
    main()



#4.1
i = 0
a = 'helloworld'
  
while i < len(a): 
    if a[i] == 'e' or a[i] == 's': 
        i += 1
        continue
          
    print('Current Letter :', a[i]) 
    i += 1


#4.2
i = 0
while i < 4: 
    i += 1
    print(i) 
else:
    print("No Break\n") 
  
i = 0
while i < 4: 
    i += 1
    print(i) 
    break
else:
    print("No Break")


#4.3
for i in range(10): 
    print(i) 
    if i == 2: 
        break


#4.4
count = 1
while count <= 5:
    print("Count: ", count)
    count += 1
else:
    print("The loop has ended.")


#4.5
def sum_of_series(start, end, step):
    total = 0
    for i in range(start, end+1, step):
        total += i
    
    return total
start = 4
end = 40
step = 4
result = sum_of_series(start, end, step)
print("Sum of the series:", result)


#4.6
def fibonacci(n):
    fib_sequence = [0, 1]
    for i in range(2, n):
        next_term = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_term)
    
    return fib_sequence
n = int(input("Enter the value of 'n': "))
if n <= 0:
    print("Please enter a positive integer.")
else:
    fib_sequence = fibonacci(n)
    print("Fibonacci sequence up to the", n, "th term:")
    print(fib_sequence)


#4.7
def multiplication_table(number):
    print("Multiplication table for", number, ":")
    for i in range(1, 11):
        print(number, "x", i, "=", number * i)
number = int(input("Enter the number for which you want to print the multiplication table: "))
multiplication_table(number)


#4.8
def print_triangle(rows):
    for i in range(1, rows + 1):
        print(" " * (rows - i) + "* " * i)
rows = int(input("Enter the number of rows for the triangle: "))
print_triangle(rows)


#4.9
def sum_of_series(start, end, step):
    total = 0
    for i in range(start, end+1, step):
        total += i
    return total
start = 3
end = 30
step = 3
result = sum_of_series(start, end, step)
print("Sum of the series:", result)


#4.10
def product_of_series(numbers):
    product = 1
    for num in numbers:
        product *= num
    
    return product
series = [15, 13, 11, 9, 7]

result = product_of_series(series)
print("Product of the series:", result)


#4.11
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
number = int(input("Enter a non-negative integer: "))
if number < 0:
    print("Factorial is not defined for negative numbers.")
else:
    result = factorial(number)
    print("Factorial of", number, "is:", result)


#4.12
def cube_of_even_numbers(n):
    cubes = []
    for i in range(1, n+1):
        cubes.append((2*i) ** 3)
    return cubes
cubes = cube_of_even_numbers(10)
print("Cubes of the first 10 even numbers:")
for index, cube in enumerate(cubes, start=1):
    print(f"The cube of {index*2} is {cube}")


#4.13
def sum_of_natural_numbers_formula(n):
    return n * (n + 1) // 2
n = int(input("Enter the value of 'n': "))
if n <= 0:
    print("Please enter a positive integer.")
else:
    result_formula = sum_of_natural_numbers_formula(n)
    print("Sum of the first", n, "natural numbers:", result_formula)


#4.14
def display_numbers_reverse():
    for i in range(10, 0, -1):
        print(i)
display_numbers_reverse()



#4.15
def create_and_sort_list(size):
    import random
    my_list = [random.randint(1, 100) for _ in range(size)]
    print("List before sorting:", my_list)
    my_list.sort()
    print("List after sorting:", my_list)
size = int(input("Enter the size of the list: "))
create_and_sort_list(size)


#5.1
my_list = [1, 2, 3, 4, 5]
print("Initial list:", my_list)
my_list.append(6)
print("List after appending 6:", my_list)
print("Element at index 2:", my_list[2])
print("Sliced list:", my_list[1:4])
my_list[3] = 8
print("List after modifying element at index 3:", my_list)
my_list.remove(4)
print("List after removing 4:", my_list)
my_list.insert(2, 9)
print("List after inserting 9 at index 2:", my_list)
popped_element = my_list.pop()
print("Popped element:", popped_element)
print("List after popping the last element:", my_list)
index = my_list.index(5)
print("Index of element 5:", index)


#5.2
my_list = ['q', 'w', 'e', 'r', 't', 'y']
for i in range(len(my_list)):
    print("Element:", my_list[i])
    print("Positive Index:", i)
    print("Negative Index:", i - len(my_list))
    print() 


#5.3
# Creating a list
my_list = [1, 2, 3, 4, 5]
my_list.append(6)
print("List after appending 6:", my_list)
my_list.extend([7, 8, 9])
print("List after extending with [7, 8, 9]:", my_list)
my_list.insert(3, 10)
print("List after inserting 10 at index 3:", my_list)
my_list.remove(2)
print("List after removing first occurrence of 2:", my_list)
popped_element = my_list.pop()
print("Popped element:", popped_element)
print("List after popping the last element:", my_list)
index = my_list.index(4)
print("Index of element 4:", index)
count = my_list.count(3)
print("Number of occurrences of element 3:", count)
my_list.reverse()
print("Reversed list:", my_list)
my_list.sort()
print("Sorted list:", my_list)
copied_list = my_list.copy()
print("Shallow copy of the list:", copied_list)
my_list.clear()
print("List after clearing all elements:", my_list)

#5.4
Rows = int(input("Give the number of rows:"))  
Columns = int(input("Give the number of columns:"))  
matrixx = [[int(input()) for c in range (Columns)] for r in range(Rows)]  
print(matrixx) 


#5.5
# Create a list
my_list = [1, 2, 3, 4, 5]
my_list.append(6)
print("List after appending 6:", my_list)
my_list.extend([7, 8, 9])
print("List after extending with [7, 8, 9]:", my_list)
my_list.insert(3, 10)
print("List after inserting 10 at index 3:", my_list)
my_list.remove(2)
print("List after removing first occurrence of 2:", my_list)
popped_element = my_list.pop()
print("Popped element:", popped_element)
print("List after popping the last element:", my_list)


#5.6
import statistics
numbers = [10, 15, 20, 25, 30]
mean = statistics.mean(numbers)
print("Mean:", mean)
variance = statistics.variance(numbers)
print("Variance:", variance)
std_deviation = statistics.stdev(numbers)
print("Standard Deviation:", std_deviation)'''
















